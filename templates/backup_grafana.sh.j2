#!/bin/bash
set -e

export GRAFANA_TOKEN='{{ grafana_api_token | default('') }}'
export GRAFANA_URL='{{ grafana_url | default('http://localhost:3000') }}'

script_path=$(dirname ${BASH_SOURCE[0]})
current_path=$(realpath $script_path)
current_time=`date +"%Y-%m-%d-%H%M%S"`
backup_archive_dir="{{ grafana_backup_archive_dir }}"
backup_dir={{ grafana_backup_tmp_dir | default('/opt/backups/grafana') }}/{{ grafana_backup_tmp_folder|default('grafana_backup_${current_time}') }}
backup_tmp_dir={{ grafana_backup_tmp_dir }}

backup_archive=$backup_dir.tar.gz

dashboard_backup_path="$backup_dir/dashboards"
datasource_backup_path="$backup_dir/datasources"
folders_backup_path="$backup_dir/folders"


echo
echo "Starting Grafana Backup at: $current_time"
echo "Temporary backup location: $backup_tmp_dir"
echo "Backup Archive location $backup_archive_dir"
echo

sleep 3

echo -e "
  Backing up the following features:
    - dashboards: $dashboard_backup_path
    - datasources: $datasource_backup_path
    - folders: $folders_backup_path
"

echo "Creating directories"

if [ ! -d "$backup_archive_dir" ]; then
mkdir -p "$backup_archive_dir"
fi

if [ ! -d "$dashboard_backup_path" ]; then
mkdir -p "$dashboard_backup_path"
fi

if [ ! -d "$datasource_backup_path" ]; then
mkdir -p "$datasource_backup_path"
fi

if [ ! -d "$folders_backup_path" ]; then
mkdir -p "$folders_backup_path"
fi

echo
echo "Backing up Grafana Dashboards"
echo
python "${current_path}/saveDashboards.py" $dashboard_backup_path || exit 0
echo
echo "Backing up Grafana Datasources"
echo
python "${current_path}/saveDatasources.py" $datasource_backup_path || exit 0
echo
echo "Backing up Grafana Folders"
echo
python "${current_path}/saveFolders.py" $folders_backup_path || exit 0f

# wait for grafana backup cleanup tasks to complete
sleep 60

# compress grafana backups at $backup_tmp_dir/grafana_backup_${current_time} and move to cephfs directory $backup_archive_dir/grafana_backup_${current_time}.tgz
cd $backup_tmp_dir
tar -czvpf $backup_archive_dir/grafana_backup_${current_time}.tgz grafana_backup_${current_time}

# check exit code of tar command and remove old directories if we exited successfully
if [[ $? -eq 0 ]]; then
echo grafana_backup_${current_time} archive successful, safe to rm $backup_tmp_dir/grafana_backup_${current_time}
rm -r $backup_tmp_dir/grafana_backup_${current_time}
else
# exit if tar exited with an error
echo rm -r $backup_tmp_dir/grafana_backup_${current_time} failed to archive, we will leave the uncompressed backup in place
fi

echo
echo Grafana Backup Completed at $(date +"%Y-%m-%d-%H%M%S")
echo