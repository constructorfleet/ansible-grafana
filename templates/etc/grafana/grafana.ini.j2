##################### Grafana Configuration Example #####################
#
# Everything has defaults so you only need to uncomment things you want to
# change

# possible values : production, development
app_mode = {{ grafana_app_mode|default('production') }}

# instance name, defaults to HOSTNAME environment variable value or hostname if HOSTNAME var is empty
;instance_name = ${HOSTNAME}

#################################### Paths ####################################
[paths]

{% if grafana_data_dir is defined and grafana_data_dir != None %}
data = {{ grafana_data_dir|default('/var/lib/grafana') }}
{% endif %}

# Temporary files in `data` directory older than given duration will be removed
;temp_data_lifetime = 24h

# Directory where grafana can store logs
logs = {{ grafana_log_dir|default('/var/log/grafana') }}

# Directory where grafana will automatically scan and look for plugins
;plugins = /var/lib/grafana/plugins

# folder that contains provisioning config files that grafana will apply on startup and while running.
;provisioning = conf/provisioning

#################################### Server ####################################
[server]
protocol = {{ grafana_http_protocol | default('http') }}
http_addr = {{ grafana_http_addr | default('0.0.0.0') }}
http_port = {{ grafana_http_port | default('3000') }}
domain = {{ grafana_domain | default('localhost') }}

# Redirect to correct domain if host header does not match domain
# Prevents DNS rebinding attacks
;enforce_domain = false

{% if grafana_root_url is defined and grafana_root_url != None %}
root_url = {{ grafana_root_url }}
{% endif %}

# Log web requests
;router_logging = false

# the path relative working path
;static_root_path = public

{% if grafana_enable_gzip %}
enable_gzip = true
{% endif %}

{% if grafana_enable_ssl %}
cert_file = {{ grafana_ssl_certpath }}
cert_key = {{ grafana_ssl_keypath }}
{% endif %}

# Unix socket path
;socket =

#################################### Database ####################################
[database]
# You can configure the database connection by specifying type, host, name, user and password
# as separate properties or as on string using the url properties.

# Either "mysql", "postgres" or "sqlite3", it's your choice
type = "{{ grafana_database_type|default('sqlite3') }}"
{% if grafana_database_host != None %}
host = "{{ grafana_database_host }}"
{% else %}
;host
{% endif %}
{% if grafana_database_name != None %}
name = "{{ grafana_database_name|default('grafana') }}"
{% endif %}
{% if grafana_database_user != None %}
user = "{{ grafana_database_user }}"
{% else %}
;user
{% endif %}
# If the password contains # or ; you have to wrap it with triple quotes. Ex """#password;"""
{% if grafana_database_user_password != None %}
password = {{ grafana_database_user_password }}
{% else %}
;password
{% endif %}

# Use either URL or the previous fields to configure the database
# Example: mysql://user:secret@host:port/database
{% if grafana_database_full_url != None %}
url = {{ grafana_database_full_url }}
{% else %}
;url
{% endif %}


# For "postgres" only, either "disable", "require" or "verify-full"
{% if grafana_database_type == 'postgres'  %}
ssl_mode = {{ grafana_postgres_ssl_mode|default('disable') }}
{% endif %}
{% if grafana_postgres_ssl_mode != 'disable' %}
{% if grafana_postgres_ca_cert_path != None %}
ca_cert_path = {{ grafana_postgres_ca_cert_path }}
{% else %}
;ca_cert_path =
{% endif %}
{% if grafana_postgres_client_key_path != None %}
ca_key_path = {{ grafana_postgres_client_key_path }}
{% else %}
;client_key_path =
{% endif %}
{% if grafana_postgres_client_cert_path != None %}
client_cert_path = {{ grafana_postgres_client_cert_path }}
{% else %}
;client_cert_path =
{% endif %}
{% if grafana_postgres_client_cert_name != None %}
server_cert_name = {{ grafana_postgres_client_cert_name }}
{% else %}
;server_cert_name =
{% endif %}
{% else %}
;ssl_mode =
{% endif %}

# For "sqlite3" only, path relative to data_path setting
{% if grafana_database_type == 'sqlite3'  %}
path = {{ grafana_sqlite_database_path|default('grafana.db') }}
{% endif %}

# Max idle conn setting default is 2
max_idle_conn = {{ grafana_database_max_idle_conn|default('2') }}

# Max conn setting default is 0 (mean not set)
max_open_conn = {{ grafana_database_max_open_conn|default('150') }}

# Connection Max Lifetime default is 14400 (means 14400 seconds or 4 hours)
conn_max_lifetime = {{ grafana_database_conn_max_lifetime|default('14400') }}

# Set to true to log the sql calls and execution times.
log_queries = {{ grafana_database_log_queries|default('false') }}

# For "sqlite3" only. cache mode setting used for connecting to the database. (private, shared)
{% if grafana_database_type == 'sqlite3'  %}
cache_mode = {{ grafana_sqlite_cache_mode|default('private') }}
{% else %}
;cache_mode =
{% endif %}

################################### Data sources #########################
[datasources]
# Upper limit of data sources that Grafana will return. This limit is a temporary configuration and it will be deprecated when pagination will be introduced on the list data sources API.
datasource_limit = {{ grafana_datasource_limit|default('5000') }}

#################################### Remote Cache ####################################

[remote_cache]
{% if grafana_remote_cache != None %}
type = {{ grafana_remote_cache|default('database') }}
# Either "redis", "memcached" or "database" default is "database"
{% endif %}

# cache connectionstring options
# database: will use Grafana primary database.
# redis: config like redis server e.g. `addr=127.0.0.1:6379,pool_size=100,db=0,ssl=false`. Only addr is required. ssl may be 'true', 'false', or 'insecure'.
# memcache: 127.0.0.1:11211
{% if grafana_remote_cache != 'database' %}
connstr = {{ grafana_cache_connstr }}
{% else %}
;connstr =
{% endif %}

#################################### Session ####################################
[session]
# Either "memory", "file", "redis", "mysql", "postgres", default is "file"
{% if grafana_session_provider != None %}
provider = {{ grafana_session_provider|default('file') }}
{% endif %}

# Provider config options
# memory: not have any config yet
# file: session dir path, is relative to grafana data_path
# redis: config like redis server e.g. `addr=127.0.0.1:6379,pool_size=100,db=grafana`
# mysql: go-sql-driver/mysql dsn config string, e.g. `user:password@tcp(127.0.0.1:3306)/database_name`
# postgres: user=a password=b host=localhost port=5432 dbname=c sslmode=disable
{% if grafana_provider_config != None %}
provider_config = {{ grafana_provider_config }}
{% else %}
;provider_config =
{% endif %}

# Session cookie name
cookie_name = grafana_sess

# If you use session in https only, default is false
cookie_secure = false

# Session life time, default is 86400
session_life_time = 86400

#################################### Data proxy ###########################
[dataproxy]

# This enables data proxy logging, default is false
;logging = false

#################################### Analytics ####################################
[analytics]
# Server reporting, sends usage counters to stats.grafana.org every 24 hours.
# No ip addresses are being tracked, only simple counters to track
# running instances, dashboard and error counts. It is very helpful to us.
# Change this option to false to disable reporting.
;reporting_enabled = true

# Set to false to disable all checks to https://grafana.net
# for new vesions (grafana itself and plugins), check is used
# in some UI views to notify that grafana or plugin update exists
# This option does not cause any auto updates, nor send any information
# only a GET request to http://grafana.com to get latest versions
;check_for_updates = true

# Google Analytics universal tracking code, only enabled if you specify an id here
;google_analytics_ua_id =

#################################### Security ####################################
[security]
# default admin user, created on startup
admin_user = admin

# default admin password, can be changed before first start of grafana,  or in profile settings
admin_password = admin

# used for signing
;secret_key = SW2YcwTIb9zpOOhoPsMm

# Auto-login remember days
;login_remember_days = 7
;cookie_username = grafana_user
;cookie_remember_name = grafana_remember

# disable gravatar profile images
;disable_gravatar = false

# data source proxy whitelist (ip_or_domain:port separated by spaces)
;data_source_proxy_whitelist =

# disable protection against brute force login attempts
;disable_brute_force_login_protection = false

{% if grafana_allow_embedding|default(False) %}
allow_embedding = true
{% else %}
allow_embedding = false
{% endif %}

#################################### Snapshots ###########################
[snapshots]
# snapshot sharing options
;external_enabled = true
;external_snapshot_url = https://snapshots-origin.raintank.io
;external_snapshot_name = Publish to snapshot.raintank.io

# remove expired snapshot
;snapshot_remove_expired = true

#################################### Dashboards History ##################
[dashboards]
# Number dashboard versions to keep (per dashboard). Default: 20, Minimum: 1
versions_to_keep = 50

#################################### Users ###############################
[users]
# disable user signup / registration

{% if grafana_allow_signup|default(False) %}
allow_sign_up = true
{% else %}
allow_sign_up = false
{% endif %}

# Allow non admin users to create organizations

{% if grafana_allow_org_create|default(False) %}
allow_org_create = true
{% else %}
allow_org_create = false
{% endif %}

# Set to true to automatically assign new users to the default organization (id 1)
{% if grafana_auto_assign_org|default(True) %}
auto_assign_org = true
{% else %}
auto_assign_org = false
{% endif %}

# Default role new users will be automatically assigned (if disabled above is set to true)
{% if grafana_auto_assign_org|default(True) %}
auto_assign_org_role = {{ grafana_auto_assign_org_role|default('Viewer') }}
{% else %}
;auto_assign_org_role = Viewer
{% endif %}

# Background text for the user field on the login page
;login_hint = email or username

# Default UI theme ("dark" or "light")
default_theme = dark

# External user management, these options affect the organization users view
;external_manage_link_url =
;external_manage_link_name =
;external_manage_info =

# Viewers can edit/inspect dashboard settings in the browser. But not save the dashboard.
viewers_can_edit = false

[auth]
# Set to true to disable (hide) the login form, useful if you use OAuth, defaults to false
;disable_login_form = false

# Set to true to disable the signout link in the side menu. useful if you use auth.proxy, defaults to false
;disable_signout_menu = false

# URL to redirect the user to after sign out
;signout_redirect_url =

# Set to true to attempt login with OAuth automatically, skipping the login screen.
# This setting is ignored if multiple OAuth providers are configured.
;oauth_auto_login = false

#################################### Anonymous Auth ##########################
{% if grafana_enable_auth_anonymous %}
[auth.anonymous]
# enable anonymous access
enabled = true

# specify organization name that should be used for unauthenticated users
org_name = {{ grafana_auth_anonymous_org_name|default('Guest') }}

# specify role for unauthenticated users
org_role = Viewer
{% endif %}
#################################### Github Auth ##########################
{% if grafana_enable_auth_github %}
[auth.github]
;enabled = false
;allow_sign_up = true
;client_id = some_id
;client_secret = some_secret
;scopes = user:email,read:org
;auth_url = https://github.com/login/oauth/authorize
;token_url = https://github.com/login/oauth/access_token
;api_url = https://api.github.com/user
;team_ids =
;allowed_organizations =
{% endif %}
#################################### Google Auth ##########################
{% if grafana_enable_auth_google %}
[auth.google]
;enabled = false
;allow_sign_up = true
;client_id = some_client_id
;client_secret = some_client_secret
;scopes = https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email
;auth_url = https://accounts.google.com/o/oauth2/auth
;token_url = https://accounts.google.com/o/oauth2/token
;api_url = https://www.googleapis.com/oauth2/v1/userinfo
;allowed_domains =
{% endif %}
#################################### Generic OAuth ##########################
{% if grafana_enable_auth_oauth %}
[auth.generic_oauth]
;enabled = false
;name = OAuth
;allow_sign_up = true
;client_id = some_id
;client_secret = some_secret
;scopes = user:email,read:org
;auth_url = https://foo.bar/login/oauth/authorize
;token_url = https://foo.bar/login/oauth/access_token
;api_url = https://foo.bar/user
;team_ids =
;allowed_organizations =
;tls_skip_verify_insecure = false
;tls_client_cert =
;tls_client_key =
;tls_client_ca =
{% endif %}
#################################### Grafana.com Auth ####################
{% if grafana_enable_auth_grafana %}
[auth.grafana_com]
;enabled = false
;allow_sign_up = true
;client_id = some_id
;client_secret = some_secret
;scopes = user:email
;allowed_organizations =
{% endif %}
#################################### Auth Proxy ##########################
{% if grafana_enable_auth_proxy %}
[auth.proxy]
;enabled = false
;header_name = X-WEBAUTH-USER
;header_property = username
;auto_sign_up = true
;ldap_sync_ttl = 60
;whitelist = 192.168.1.1, 192.168.2.1
;headers = Email:X-User-Email, Name:X-User-Name
{% endif %}
#################################### Basic Auth ##########################
{% if grafana_enable_auth_basic %}
[auth.basic]
;enabled = true
{% endif %}
#################################### Auth LDAP ##########################
{% if grafana_enable_auth_ldap %}
[auth.ldap]
enabled = true
config_file = {{ grafana_configuration_dir | default('/etc/grafana') }}/ldap.toml
allow_sign_up = {{ grafana_openldap_allow_sign_up | to_json }}
{% endif %}

#################################### SMTP / Emailing ##########################
[smtp]
{% if grafana_enable_smtp %}
enabled = true
host = {{ grafana_smtp_host | default('localhost') }}:{{ grafana_smtp_port | default('25') }}
user = {{ grafana_smtp_user | default('') }}
password = """{{ grafana_smtp_password | default('') }}"""

{% if grafana_smtp_cert_file is defined and grafana_smtp_cert_file != '' %}
cert_file = {{ grafana_smtp_cert_file }}
{% endif %}

{% if grafana_smtp_key_file is defined and grafana_smtp_key_file != '' %}
key_file = {{ grafana_smtp_key_file }}
{% endif %}

{% if grafana_smtp_skip_verify %}
skip_verify = true
{% else %}
skip_verify = false
{% endif %}

from_address = {{ grafana_smtp_from_address | default('admin@grafana') }}
from_name = {{ grafana_smtp_from_name | default('Grafana Admin') }}

{% if grafana_smtp_ehlo_identity is defined and grafana_smtp_ehlo_identity != '' %}
ehlo_identity = {{ grafana_smtp_ehlo_identity }}
{% endif %}

{% else %}
enabled = false
{% endif %}

[emails]
;welcome_email_on_sign_up = false

#################################### Logging ##########################
[log]
# Either "console", "file", "syslog". Default is console and  file
# Use space to separate multiple modes, e.g. "console file"
;mode = console file

# Either "debug", "info", "warn", "error", "critical", default is "info"
;level = info

# optional settings to set different levels for specific loggers. Ex filters = sqlstore:debug
;filters =

# For "console" mode only
[log.console]
;level =

# log line format, valid options are text, console and json
;format = console

# For "file" mode only
[log.file]
;level =

# log line format, valid options are text, console and json
;format = text

# This enables automated log rotate(switch of following options), default is true
;log_rotate = true

# Max line number of single file, default is 1000000
;max_lines = 1000000

# Max size shift of single file, default is 28 means 1 << 28, 256MB
;max_size_shift = 28

# Segment log daily, default is true
;daily_rotate = true

# Expired days of log file(delete after max days), default is 7
;max_days = 7

[log.syslog]
;level =

# log line format, valid options are text, console and json
;format = text

# Syslog network type and address. This can be udp, tcp, or unix. If left blank, the default unix endpoints will be used.
;network =
;address =

# Syslog facility. user, daemon and local0 through local7 are valid.
;facility =

# Syslog tag. By default, the process' argv[0] is used.
;tag =

#################################### Alerting ############################
[alerting]
# Disable alerting engine & UI features
;enabled = true
# Makes it possible to turn off alert rule execution but alerting UI is visible
;execute_alerts = true

# Default setting for new alert rules. Defaults to categorize error and timeouts as alerting. (alerting, keep_state)
;error_or_timeout = alerting

# Default setting for how Grafana handles nodata or null values in alerting. (alerting, no_data, keep_state, ok)
;nodata_or_nullvalues = no_data

# Alert notifications can include images, but rendering many images at the same time can overload the server
# This limit will protect the server from render overloading and make sure notifications are sent out quickly
;concurrent_render_limit = 5

#################################### Explore #############################
[explore]
# Enable the Explore section
;enabled = false

#################################### Internal Grafana Metrics ##########################
# Metrics available at HTTP API Url /metrics
[metrics]
# Disable / Enable internal metrics
;enabled           = true

# Publish interval
;interval_seconds  = 10

# Send internal metrics to Graphite
[metrics.graphite]
# Enable by setting the address setting (ex localhost:2003)
;address =
;prefix = prod.grafana.%(instance_name)s.

#################################### Distributed tracing ############
[tracing.jaeger]
# Enable by setting the address sending traces to jaeger (ex localhost:6831)
;address = localhost:6831
# Tag that will always be included in when creating new spans. ex (tag1:value1,tag2:value2)
;always_included_tag = tag1:value1
# Type specifies the type of the sampler: const, probabilistic, rateLimiting, or remote
;sampler_type = const
# jaeger samplerconfig param
# for "const" sampler, 0 or 1 for always false/true respectively
# for "probabilistic" sampler, a probability between 0 and 1
# for "rateLimiting" sampler, the number of spans per second
# for "remote" sampler, param is the same as for "probabilistic"
# and indicates the initial sampling rate before the actual one
# is received from the mothership
;sampler_param = 1

#################################### Grafana.com integration  ##########################
# Url used to import dashboards directly from Grafana.com
[grafana_com]
;url = https://grafana.com

#################################### External image storage ##########################
[external_image_storage]
# Used for uploading images to public servers so they can be included in slack/email messages.
# you can choose between (s3, webdav, gcs, azure_blob, local)
;provider =

[external_image_storage.s3]
;bucket =
;region =
;path =
;access_key =
;secret_key =

[external_image_storage.webdav]
;url =
;public_url =
;username =
;password =

[external_image_storage.gcs]
;key_file =
;bucket =
;path =

[external_image_storage.azure_blob]
;account_name =
;account_key =
;container_name =

[external_image_storage.local]
# does not require any configuration

[rendering]
# Options to configure external image rendering server like https://github.com/grafana/grafana-image-renderer
;server_url =
;callback_url =

[enterprise]
# Path to a valid Grafana Enterprise license.jwt file
;license_path =

